#include <FeaturesHelper.h>
#include <FeatureExtractor.h>

FeaturesHelper::FeaturesHelper(){	
    // Set the masks and frequencies to 0
	for (uint8_t i=0; i<HELPER_MAX_CHANNELS;i++){		
		this->frequency_hz[i]=0;
		this->window[i]=DEFAULT_WINDOW_MS;
		for (uint8_t j=0;j<NUMFEATS;j++){
			    this->mask[i][j]=0;				
			}
		channelName[i][0]='\0';
	}		
}

float * FeaturesHelper::getFeatures(){
	// For each feature extractor registered in the helper extract the features using the 
	// mask previously assigned and collect the features generated.
	
	uint8_t featIdx=0;
	
	for (uint8_t i=0; i<this->numchannels;i++){
		float * feats=this->extractors[i]->extractAll(this->window[i], this->mask[i]);	
		for (uint8_t j=0;j<NUMFEATS;j++){
			if (this->mask[i][j]){
				features[featIdx]=feats[j];
				featIdx++;
			}
	}
}
	return this->features;
}

void FeaturesHelper::clearExtractors(){
	for (uint8_t i=0; i<this->numchannels;i++){
		this->extractors[i]->clear();
	}
}

void FeaturesHelper::RegisterExtractor(FeatureExtractor * extractor, float samplingFrequency_hz, char * chanName /*NULL*/){
	uint8_t i=this->numchannels;
	if (i>HELPER_MAX_CHANNELS){
		return;
	}	
	this->frequency_hz[i]=samplingFrequency_hz;		
	this->window[i]=DEFAULT_WINDOW_MS*(samplingFrequency_hz/1000);
	this->extractors[i]=extractor;
	if (chanName!=NULL){
		strncpy(this->channelName[i],chanName,HELPER_MAX_STR_LEN);
		channelName[i][HELPER_MAX_STR_LEN]='\0';
	}
	this->numchannels++;			
}


uint8_t FeaturesHelper::maskSize(void){
	return NUMFEATS;
}
bool * FeaturesHelper::getMask(uint8_t i){
	if (i>this->numchannels){
	return NULL;	
	}	
	return this->mask[i];
}


uint16_t FeaturesHelper::getWindow(uint8_t i){
	if (i>this->numchannels){
	return 0;	
	}	
	return this->window[i];
}

uint8_t FeaturesHelper::getNumChannels(){
	return this->numchannels;
}

char * FeaturesHelper::getChannelName(uint8_t i){
	return this->channelName[i];
}




void FeaturesHelper::setMask(uint8_t i, bool * mask){
	if (i>this->numchannels){
	return;	
	}	
	for (uint8_t j=0; j<NUMFEATS;j++){
			this->mask[i][j]=mask[j];
		}	   
}


void FeaturesHelper::setWindow(uint8_t i,uint16_t window_ms){
	if (i>this->numchannels){
	return;	
	}	
	this->window[i]=window_ms*(this->frequency_hz[i]/1000);

}

void FeaturesHelper::setAllWindows(uint16_t window_ms) {
    for(uint8_t i = 0; i < this->numchannels; i++) {
        FeaturesHelper::setWindow(i, window_ms);
    }
}

uint8_t FeaturesHelper::numFeatures(){
	// Return the total feature generated by this helper
	uint8_t numfeats=0;
	for (uint8_t i=0; i<this->numchannels;i++){
		for (uint8_t j=0; j<NUMFEATS;j++){
			numfeats=numfeats+this->mask[i][j];
		}	
	}
	return numfeats;	
}
